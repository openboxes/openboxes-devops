- name: Resetting OpenBoxes database (please allow 15-20 minutes)
  hosts: dev
  tasks:

    - name: Ensuring explicit choice of host(s)
      run_once: true
      when: ansible_limit is not defined
      ansible.builtin.fail:
        msg: "you must use -l or --limit! If you really want to use all hosts, use -l 'all'"

    - name: Stopping Tomcat service
      ansible.builtin.systemd:
        daemon_reload: true
        name: tomcat
        state: stopped

    - name: Clobbering mysql database
      register: reset_db
      ansible.builtin.script:
        cmd: |
          scripts/reset_db.bash \
          {{ '-s' if use_sudo else '' }} -d {{ db_name }} -u {{ db_username }}
      environment:
        DB_PASSWORD: "{{ db_users[db_username].password }}"

    - name: Collecting script output
      when: reset_db.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ reset_db.stdout_lines | regex_replace(db_users[db_username].password, '********') }}"
          - "{{ reset_db.stderr_lines | regex_replace(db_users[db_username].password, '********') }}"

    - name: Restarting MariaDB service
      ansible.builtin.systemd:
        daemon_reload: true
        name: mysql
        state: restarted

    - name: Restarting and verifying Tomcat on web-serving hosts
      when: webserver is defined
      block:
        - name: Restarting Tomcat service on web-serving hosts
          ansible.builtin.systemd:
            daemon_reload: true
            name: tomcat
            state: restarted
        - name: "Waiting for 200 from https://$remote_host{{ app_context }}"
          delay: 15
          retries: 60
          register: https_response
          until: https_response.status == 200
          ansible.builtin.uri:
            url: "https://{{ ansible_fqdn }}{{ app_context }}"

  vars:
    db_name: openboxes
    db_username: root
    use_sudo: false
