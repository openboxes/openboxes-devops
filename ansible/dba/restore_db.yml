- name: Restoring OpenBoxes database (please allow 10-30+ minutes)
  any_errors_fatal: true
  hosts: all:!prd
  vars:
    archive_file: ../build/archive_db/obnav/openboxes.tgz
    db_username: openboxes
    force: false
    use_sudo: false

  tasks:

    - name: Ensuring explicit choice of host(s)
      when: ansible_limit is not defined
      ansible.builtin.fail:
        msg: "you must use -l or --limit! If you really want to use all hosts, use -l 'all'"

    - name: Stopping Tomcat service
      ansible.builtin.systemd:
        daemon_reload: true
        name: tomcat
        state: stopped

    - name: Restoring database
      when: inventory.get('mysql', {}).get('enabled')
      block:

        - name: Uploading archive to remote host (this can be slow)
          ansible.builtin.copy:
            dest: "{{ archive_file | basename }}"
            group: root
            mode: '0400'
            owner: root
            src: "{{ archive_file }}"

        - name: Importing mysql archive (this can be slow, too)
          register: restore_db
          ansible.builtin.script:
            cmd: >
              ../scripts/restore_db.bash
              {{ '-f' if force else '' }}
              {{ '-s' if use_sudo else '' }}
              -c {{ inventory.get('remote_webserver', 'localhost') }}
              -d {{ inventory.db_name }}
              -i {{ archive_file | basename }}
              -u {{ db_username }}
          environment:
            DB_ROOT_PASSWORD: "{{ vault.db_users.root.password }}"
            DB_USER_PASSWORD: "{{ vault.db_users[db_username].password }}"

        - name: Collecting script output
          when: restore_db.stdout_lines is defined
          ansible.builtin.debug:
            msg:
              - "{{ restore_db.stdout_lines | regex_replace(vault.db_users[db_username].password, '********') }}"
              - "{{ restore_db.stderr_lines | regex_replace(vault.db_users[db_username].password, '********') }}"

        - name: Deleting archive file from remote host after loading
          ansible.builtin.file:
            path: "{{ archive_file | basename }}"
            state: absent

        - name: Restarting MariaDB service
          ansible.builtin.systemd:
            daemon_reload: true
            name: mysql
            state: restarted

    - name: Restarting Tomcat service on web-serving hosts
      when: inventory.get('tomcat', {}).get('enabled')
      ansible.builtin.systemd:
        daemon_reload: true
        name: tomcat
        state: restarted

    - name: "Waiting for 200 from https://...{{ inventory.app_context }}"
      delay: 30
      retries: 90  # migrations can take a while
      register: https_response
      until: https_response.status == 200
      ansible.builtin.uri:
        url: "https://{{ inventory.get('remote_webserver', ansible_fqdn) }}{{ inventory.app_context }}"
        validate_certs: false

- name: Re-enabling PIH user access
  ansible.builtin.import_playbook: ../playbooks/enable_pih_user_access.yml
