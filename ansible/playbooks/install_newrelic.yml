# Requires `ansible-galaxy install newrelic.newrelic-infra`

- name: Installing New Relic monitoring tools
  hosts: all
  tasks:

    # https://docs.newrelic.com/install/mysql/?dropdown1=linux
    - name: Creating mysql user for New Relic
      changed_when: true
      no_log: true
      ansible.builtin.command:
        argv:
          - mysql
          - -u
          - root
          - -p{{ db_users.root.password }}
          - -e
          - >-
            CREATE USER IF NOT EXISTS 'newrelic'@'localhost' IDENTIFIED BY '{{ db_users.newrelic.password }}' WITH MAX_USER_CONNECTIONS 5;
            GRANT REPLICATION CLIENT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;
            GRANT SELECT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;
            FLUSH PRIVILEGES;

    - name: Installing New Relic infrastructure agent
      ansible.builtin.include_role:
        name: newrelic.newrelic-infra
      vars:
        nrinfragent_config:
          license_key: "{{ new_relic.api_key }}"

    - name: Installing New Relic integrations with apt
      register: apt_install
      ansible.builtin.apt:
        cache_valid_time: 3600
        install_recommends: true
        state: latest
        update_cache: true
        pkg:
          - nri-mysql
          - nri-nginx

    - name: Collecting apt install output
      when: apt_install.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ apt_install.stdout_lines }}"
          - "{{ apt_install.stderr_lines }}"

    - name: Applying default New Relic integration settings
      ansible.builtin.copy:
        dest: "/etc/newrelic-infra/integrations.d/{{ item }}"
        group: root
        mode: 'preserve'
        owner: root
        remote_src: true
        src: "/etc/newrelic-infra/integrations.d/{{ item }}.sample"
      loop:
        - mysql-config.yml
        - nginx-config.yml

    - name: Fine-tuning New Relic mysql integration
      ansible.builtin.replace:
        path: /etc/newrelic-infra/integrations.d/mysql-config.yml
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - regexp: '(\s*)#?\s*DATABASE:.*'
          replace: "\\1DATABASE: {{ db_name }}  # ANSIBLE MANAGED"
        - regexp: '(\s*)#?\s*ENABLE_TLS:.*'
          replace: '\1ENABLE_TLS: true  # ANSIBLE MANAGED'
        - regexp: '(\s*)#?\s*EXTENDED_METRICS:.*'
          replace: '\1EXTENDED_METRICS: true  # ANSIBLE MANAGED'
        - regexp: '(\s*)#?\s*EXTENDED_INNODB_METRICS:.*'
          replace: '\1EXTENDED_INNODB_METRICS: true  # ANSIBLE MANAGED'
        - regexp: '(\s*)#?\s*EXTENDED_MY_ISAM_METRICS:.*'
          replace: '\1EXTENDED_MY_ISAM_METRICS: true  # ANSIBLE MANAGED'
        - regexp: '(\s*)#?\s*PASSWORD:.*'
          replace: "\\1# ANSIBLE MANAGED\\1PASSWORD: {{ db_users.newrelic.password }}"
        - regexp: '(\s*)#?\s*SOCKET:(.*)'
          replace: '\1# SOCKET:\2  # ANSIBLE MANAGED'
        - regexp: '(\s*)labels:'
          replace: "\\1labels:\\1  hostname: {{ ansible_fqdn }}  # ANSIBLE MANAGED"

    - name: Fine-tuning New Relic nginx integration
      ansible.builtin.replace:
        path: /etc/newrelic-infra/integrations.d/nginx-config.yml
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - regexp: '(\s*)STATUS_URL.*'
          replace: "\\1STATUS_URL: https://{{ ansible_fqdn }}/status  # ANSIBLE MANAGED"

    - name: Enabling log forwarding to New Relic
      ansible.builtin.copy:
        dest: "/etc/newrelic-infra/logging.d/{{ item }}"
        group: root
        mode: 'preserve'
        owner: root
        remote_src: true
        src: "/etc/newrelic-infra/logging.d/{{ item }}.example"
      loop:
        - mysql-log.yml
        - nginx-log.yml

    - name: Creating temporary download directory
      register: tmp_download_dir
      ansible.builtin.tempfile:
        state: directory
        suffix: download

    - name: Downloading New Relic Tomcat agents
      ansible.builtin.get_url:
        dest: "{{ item.dest }}"
        mode: '0400'
        url: "{{ item.url }}"
      loop:
        - dest: "{{ tmp_download_dir.path }}/newrelic-tomcat7.zip"
          url: https://download.newrelic.com/newrelic/java-agent/newrelic-agent/6.5.4/newrelic-java.zip
        - dest: "{{ tmp_download_dir.path }}/newrelic-tomcat85.zip"
          url: https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip

    - name: Unpacking New Relic Tomcat agents
      ansible.builtin.unarchive:
        dest: "{{ item.dest }}"
        group: tomcat
        owner: tomcat
        remote_src: true
        src: "{{ item.src }}"
      loop:
        - dest: /var/lib/tomcat7
          src: "{{ tmp_download_dir.path }}/newrelic-tomcat7.zip"
        - dest: /var/lib/tomcat85
          src: "{{ tmp_download_dir.path }}/newrelic-tomcat85.zip"

    - name: Configuring New Relic Tomcat agents
      ansible.builtin.replace:
        path: "{{ item.file }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - file: /var/lib/tomcat7/newrelic/newrelic.yml
          regexp: '^  app_name: .*$'
          replace: "  # ANSIBLE MANAGED\n  app_name: {{ ansible_hostname }}.tomcat7"
        - file: /var/lib/tomcat7/newrelic/newrelic.yml
          regexp: '^  enable_auto_app_naming: .*$'
          replace: "  # ANSIBLE MANAGED\n  enable_auto_app_naming: false"
        - file: /var/lib/tomcat7/newrelic/newrelic.yml
          regexp: '^  license_key: .*$'
          replace: "  # ANSIBLE MANAGED\n  license_key: {{ new_relic.api_key }}"
        - file: /var/lib/tomcat85/newrelic/newrelic.yml
          regexp: '^  app_name: .*$'
          replace: "  # ANSIBLE MANAGED\n  app_name: {{ ansible_hostname }}.tomcat85"
        - file: /var/lib/tomcat85/newrelic/newrelic.yml
          regexp: '^  enable_auto_app_naming: .*$'
          replace: "  # ANSIBLE MANAGED\n  enable_auto_app_naming: false"
        - file: /var/lib/tomcat85/newrelic/newrelic.yml
          regexp: '^  license_key: .*$'
          replace: "  # ANSIBLE MANAGED\n  license_key: {{ new_relic.api_key }}"
      no_log: true

    - name: Configuring New Relic infrastructure agent
      ansible.builtin.lineinfile:
        insertafter: EOF
        line: "display_name: {{ ansible_hostname }}  # ANSIBLE MANAGED"
        path: /etc/newrelic-infra.yml

    - name: Restarting New Relic service
      ansible.builtin.systemd:
        daemon_reload: true
        enabled: true
        name: newrelic-infra
        state: restarted

    - name: Restarting Tomcat and Nginx on web-serving hosts
      when: webserver is defined
      block:
        - name: Restarting Tomcat service on web-serving hosts
          ansible.builtin.systemd:
            daemon_reload: true
            enabled: true
            name: tomcat
            state: restarted
        - name: Restarting Nginx service on web-serving hosts
          ansible.builtin.systemd:
            daemon_reload: true
            enabled: true
            name: nginx
            state: restarted
