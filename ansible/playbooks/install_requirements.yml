- name: Installing OpenBoxes requirements
  hosts: all
  vars:
    logback_version: '1.2.11'
    mariadb_version: '10.11'
    tomcat7_version: '7.0.109'
    tomcat8_version: '8.5.87'

  tasks:

    - name: Ensuring host is running Ubuntu 22.04 LTS
      when: ansible_facts.distribution_release != 'jammy' or ansible_facts.distribution_version != '22.04'
      ansible.builtin.fail:
        msg: this playbook requires Ubuntu 22.04 LTS

    - name: Removing apache2 and old MariaDB releases
      register: apt_uninstall
      ansible.builtin.apt:
        autoremove: true
        purge: true
        state: absent
        pkg:
          - apache2
          - mariadb-client-10.6
          - mariadb-server-10.6

    - name: Collecting apt uninstall output
      when: apt_uninstall.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ apt_uninstall.stdout_lines }}"
          - "{{ apt_uninstall.stderr_lines }}"

    - name: Adding MariaDB apt key and repository
      ansible.builtin.shell:
        cmd: >-
          set -euo pipefail &&
          curl -sLS https://r.mariadb.com/downloads/mariadb_repo_setup |
          bash -s -- --mariadb-server-version="mariadb-{{ mariadb_version }}"
        creates: /etc/apt/sources.list.d/mariadb.list
      args:
        executable: /usr/bin/bash

    - name: Adding Nginx apt key
      ansible.builtin.apt_key:
        url: https://nginx.org/keys/nginx_signing.key

    - name: Adding Nginx apt repository
      ansible.builtin.apt_repository:
        repo: deb https://nginx.org/packages/mainline/ubuntu jammy nginx

    - name: Adding Zulu apt key
      ansible.builtin.apt_key:
        # see https://www.azul.com/signing-keys/
        url: https://www.azul.com/wp-content/uploads/2021/05/0xB1998361219BD9C9.txt

    - name: Adding Zulu apt repository
      ansible.builtin.apt:
        # see https://docs.azul.com/core/zulu-openjdk/install/debian
        deb: https://cdn.azul.com/zulu/bin/zulu-repo_1.0.0-3_all.deb

    - name: Installing dependencies with apt
      register: apt_install
      ansible.builtin.apt:
        cache_valid_time: 3600
        install_recommends: true
        state: latest
        update_cache: true
        pkg:
          - libaio1
          - libtcnative-1
          - mariadb-backup
          - mariadb-client
          - mariadb-server
          - nginx
          - snapd
          - zulu-7
          - zulu-8

    - name: Collecting apt install output
      when: apt_install.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ apt_install.stdout_lines }}"
          - "{{ apt_install.stderr_lines }}"

    - name: Installing dependencies with snap
      changed_when: >-
        'is already installed' not in snap_install.stderr and
        'has no updates' not in snap_install.stderr
      register: snap_install
      ansible.builtin.shell:
        cmd: |
          snap install --classic --color=never --unicode=never certbot
          snap refresh --classic --color=never --unicode=never certbot

    - name: Collecting snap output
      when: snap_install.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ snap_install.stdout_lines }}"
          - "{{ snap_install.stderr_lines }}"

    - name: Adding groups
      ansible.builtin.group:
        gid: "{{ item.gid }}"
        name: "{{ item.name }}"
      loop:
        - gid: 512
          name: tomcat
        - gid: 1510
          name: staff

    - name: Adding tomcat user
      ansible.builtin.user:
        create_home: true
        group: "{{ item.group }}"
        groups: "{{ item.groups }}"
        name: "{{ item.name }}"
        password: '!'
        system: "{{ item.system | bool }}"
        uid: "{{ item.uid }}"
      loop:
        - group: tomcat
          groups:
          name: tomcat
          system: true
          uid: 511

    - name: Creating temporary download directory
      register: tmp_download_dir
      ansible.builtin.tempfile:
        state: directory
        suffix: .download

    - name: Downloading Tomcat archives
      ansible.builtin.get_url:
        checksum: "sha512:{{ item.url }}.sha512"
        dest: "{{ item.dest }}"
        mode: '0400'
        url: "{{ item.url }}"
      loop:
        - dest: "{{ tmp_download_dir.path }}/tomcat7.tgz"
          url: "https://archive.apache.org/dist/tomcat/tomcat-7/v{{ tomcat7_version }}/bin/apache-tomcat-{{ tomcat7_version }}.tar.gz"
        - dest: "{{ tmp_download_dir.path }}/tomcat85.tgz"
          url: "https://archive.apache.org/dist/tomcat/tomcat-8/v{{ tomcat8_version }}/bin/apache-tomcat-{{ tomcat8_version }}.tar.gz"

    - name: Unpacking Tomcat archives
      ansible.builtin.unarchive:
        dest: /opt
        group: tomcat
        owner: tomcat
        remote_src: true
        src: "{{ tmp_download_dir.path }}/{{ item }}.tgz"
        extra_opts:
          - --transform
          - 's!^[^/]\+\($\|/\)!{{ item }}\1!'
      loop:
        - tomcat7
        - tomcat85

    - name: Downloading and installing Tomcat 7 extras
      ansible.builtin.get_url:
        checksum: "sha512:{{ item.url }}.sha512"
        dest: "{{ item.dest }}"
        mode: '0400'
        url: "{{ item.url }}"
      loop:
        - dest: /opt/tomcat7/bin/tomcat-juli.jar
          url: "https://archive.apache.org/dist/tomcat/tomcat-7/v{{ tomcat7_version }}/bin/extras/tomcat-juli.jar"
        - dest: /opt/tomcat7/bin/tomcat-juli-adapters.jar
          url: "https://archive.apache.org/dist/tomcat/tomcat-7/v{{ tomcat7_version }}/bin/extras/tomcat-juli-adapters.jar"

    - name: Initializing directory tree in CATALINA_BASE
      ansible.builtin.file:
        group: tomcat
        mode: '0750'
        owner: tomcat
        path: "{{ '/'.join(item) }}"
        state: directory
      loop: "{{ ['/var/lib'] | product(['tomcat7', 'tomcat85']) | map('join', '/') | product(['bin', 'lib', 'temp', 'webapps']) }}"

    - name: Creating Tomcat logging directory
      ansible.builtin.file:
        group: tomcat
        mode: '0755'
        owner: tomcat
        path: "/var/log/{{ item }}"
        state: directory
      loop:
        - tomcat7
        - tomcat85

    - name: Symlinking Tomcat logging directory
      ansible.builtin.file:
        dest: "/var/lib/{{ item }}/logs"
        group: tomcat
        owner: tomcat
        src: "/var/log/{{ item }}"
        state: link
      loop:
        - tomcat7
        - tomcat85

    - name: Copying default Tomcat config files to CATALINA_BASE
      ansible.builtin.copy:
        dest: "/var/lib/{{ item }}"
        group: tomcat
        mode: preserve
        owner: tomcat
        remote_src: true
        src: "/opt/{{ item }}/conf"
      loop:
        - tomcat7
        - tomcat85

    - name: Copying default Tomcat webapps to CATALINA_BASE
      ansible.builtin.copy:
        dest: "/var/lib/{{ item[0] }}/webapps"
        group: tomcat
        mode: preserve
        owner: tomcat
        remote_src: true
        src: "/opt/{{ item[0] }}/webapps/{{ item[1] }}"
      loop: "{{ ['tomcat7', 'tomcat85'] | product(['ROOT', 'host-manager', 'manager']) }}"

    - name: Configuring Tomcat environment variables
      ansible.builtin.template:
        dest: "/var/lib/{{ webserver }}/bin/setenv.sh"
        group: tomcat
        mode: '0550'
        owner: tomcat
        src: ../templates/setenv.sh.j2
      loop:
        - tomcat7
        - tomcat85
      vars:
        webserver: "{{ item }}"

    - name: Disabling Tomcat session persistence
      ansible.builtin.replace:
        # prevent 'ClassNotFoundException while loading persisted sessions'
        path: "/var/lib/{{ item }}/conf/context.xml"
        regexp: '(\s*)<!--\s*\n(\s*)<Manager pathname="" />.*\n(\s*)-->.*'
        replace: '\1<Manager pathname="" /> <!-- ANSIBLE ENABLED -->'
      loop:
        - tomcat7
        - tomcat85

    - name: Increasing Tomcat cache size
      ansible.builtin.lineinfile:
        insertbefore: '^</Context>'
        # prevent org.apache.catalina.webresources.Cache.getResource failures
        line: '  <Resources cachingAllowed="true" cacheMaxSize="262144" /> <!-- ANSIBLE MANAGED -->'
        path: "/var/lib/{{ item }}/conf/context.xml"
        regexp: 'cacheMaxSize'
      loop:
        - tomcat7
        - tomcat85

    - name: Removing IP-based access restrictions on Tomcat manager
      ansible.builtin.replace:
        after: 'privileged="true" >'
        before: '  <Manager'
        path: "/var/lib/{{ item }}/webapps/manager/META-INF/context.xml"
        regexp: '^(  )( *(?:<Valve|allow).*)$'
        replace: '\1<!-- ANSIBLE MANAGED: \2 -->'
      loop:
        - tomcat7
        - tomcat85

    - name: Downloading and installing logback-access
      ansible.builtin.get_url:
        checksum: "sha1:{{ url }}.sha1"
        dest: "/var/lib/{{ webserver }}/lib/{{ dependency }}.jar"
        group: tomcat
        mode: '0400'
        owner: tomcat
        url: "{{ url }}"
      loop: "{{ ['tomcat7', 'tomcat85'] | product(['logback-access', 'logback-core']) }}"
      vars:
        webserver: "{{ item[0] }}"
        dependency: "{{ item[1] }}"
        url: "https://repo1.maven.org/maven2/ch/qos/logback/{{ dependency }}/{{ logback_version }}/{{ dependency }}-{{ logback_version }}.jar"

    - name: Configuring logback-access
      ansible.builtin.template:
        dest: "/var/lib/{{ webserver }}/conf/logback-access.xml"
        group: tomcat
        mode: '0400'
        owner: tomcat
        src: ../templates/logback-access.xml.j2
      loop:
        - tomcat7
        - tomcat85
      vars:
        webserver: "{{ item }}"

    - name: Attaching logback-access to Tomcat
      ansible.builtin.lineinfile:
        insertbefore: '</Host>'
        line: '        <Valve className="ch.qos.logback.access.tomcat.LogbackValve" filename="conf/logback-access.xml"/> <!-- ANSIBLE MANAGED -->'
        path: "/var/lib/{{ item }}/conf/server.xml"
        regexp: 'LogbackValve'
      loop:
        - tomcat7
        - tomcat85

    - name: Creating Tomcat systemd service
      ansible.builtin.template:
        dest: /etc/systemd/system/tomcat.service
        group: root
        mode: '0444'
        owner: root
        src: ../templates/tomcat.service.j2

    - name: Configuring Tomcat log rotation
      when: webserver is defined
      ansible.builtin.template:
        dest: /etc/logrotate.d/tomcat
        group: root
        mode: '0444'
        owner: root
        src: ../templates/tomcat.logrotate.j2

    - name: Creating Nginx directory for static assets
      ansible.builtin.file:
        group: nginx
        mode: '0755'
        owner: nginx
        path: /etc/nginx/static
        state: directory

    - name: Uploading logo images
      ansible.builtin.copy:
        dest: /etc/nginx/static
        group: nginx
        mode: '0444'
        owner: nginx
        src: ../static/images

    - name: Configuring Nginx as a secure reverse proxy for Tomcat
      ansible.builtin.template:
        dest: /etc/nginx/conf.d/default.conf
        group: nginx
        mode: '0444'
        owner: nginx
        src: ../templates/default.conf.j2
        validate: 'nginx -t -c %s -c /etc/nginx/nginx.conf'

    - name: Sprinkling Certbot pixie dust over Nginx config
      changed_when: true
      register: certbot
      ansible.builtin.command:
        cmd: "/snap/bin/certbot -m {{ mail_address }} -nv --agree-tos --domains {{ ansible_fqdn }} --must-staple --nginx --redirect --staple-ocsp"

    - name: Collecting Certbot output
      when: certbot.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ certbot.stdout_lines }}"
          - "{{ certbot.stderr_lines }}"

    # https://eff-certbot.readthedocs.io/en/stable/using.html#where-are-my-certificates
    - name: Enabling services to read Certbot certificates after they drop privileges
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0755'
      loop:
        - /etc/letsencrypt/archive
        - /etc/letsencrypt/live

    - name: Enabling mysql group to read private Certbot keys
      ansible.builtin.file:
        group: mysql
        mode: '0640'
        path: "/etc/letsencrypt/live/{{ ansible_fqdn }}/privkey.pem"

    - name: Reminding mysql to reload Certbot keys weekly
      ansible.builtin.cron:
        job: mysqladmin flush-ssl
        name: mysqladmin flush-ssl
        special_time: weekly
        user: mysql

    # this step must go *after* certbot runs (certbot will overwrite it otherwise)
    - name: Enabling HTTP/2 in Nginx
      ansible.builtin.replace:
        path: /etc/nginx/conf.d/default.conf
        regexp: 'listen 443 ssl;(.*)$'
        replace: 'listen 443 ssl http2;\1  # ANSIBLE MODIFIED'
        validate: 'nginx -t -c %s -c /etc/nginx/nginx.conf'

    - name: Creating Grails configuration directory
      ansible.builtin.file:
        group: tomcat
        mode: '0755'
        owner: tomcat
        path: /home/tomcat/.grails
        state: directory

    - name: Removing stale Grails configuration
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /home/tomcat/.grails/openboxes-config.properties
        - /var/lib/tomcat7/.grails
        - /var/lib/tomcat85/.grails

    - name: Configuring Grails
      ansible.builtin.template:
        dest: /home/tomcat/.grails/openboxes-config.groovy
        group: tomcat
        mode: '0444'
        owner: tomcat
        src: ../templates/openboxes-config.groovy.j2

    - name: "Redirecting / to {{ app_context }}"
      ansible.builtin.template:
        dest: "/var/lib/{{ item }}/webapps/ROOT/index.jsp"
        group: tomcat
        mode: '0440'
        owner: tomcat
        src: ../templates/index.jsp.j2
      loop:
        - tomcat7
        - tomcat85

    - name: Configuring MariaDB
      ansible.builtin.template:
        dest: /etc/mysql/mariadb.conf.d/70-openboxes.cnf
        group: root
        mode: '0444'
        owner: root
        src: ../templates/my.cnf.j2

    - name: Assigning root password for MariaDB
      changed_when: true
      no_log: true
      ansible.builtin.command:
        argv:
          - mysql
          - -u
          - root
          - -p{{ db_users.root.password }}
          - -e
          - >-
            ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ db_users.root.password }}';
            FLUSH PRIVILEGES;

    - name: Securing MariaDB via mysql_secure_installation
      register: mysql_secure_installation
      ansible.builtin.expect:
        command: mysql_secure_installation
        responses:
          'Enter current password for root \(enter for none\):': "{{ db_users.root.password }}"
          'Switch to unix_socket authentication \[Y/n\]': 'Y'
          'Change the root password\? \[Y/n\]': 'n'
          'Remove anonymous users\? \[Y/n\]': 'Y'
          'Disallow root login remotely\? \[Y/n\]': 'Y'
          'Remove test database and access to it\? \[Y/n\]': 'Y'
          'Reload privilege tables now\? \[Y/n\]': 'Y'
        timeout: 5
      failed_when: '"Failed!" in mysql_secure_installation.stdout_lines'

    - name: Collecting mysql_secure_installation output
      when: mysql_secure_installation.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ mysql_secure_installation.stdout_lines | regex_replace(db_users.root.password, '********') }}"

    - name: Enabling remote DB access
      changed_when: true
      no_log: true
      when: remote_webserver is defined
      ansible.builtin.command:
        argv:
          - mysql
          - -u
          - root
          - -p{{ db_users.root.password }}
          - -e
          - >-
            GRANT ALL PRIVILEGES ON `{{ db_name }}`.*
            TO 'openboxes'@'{{ remote_webserver }}'
            IDENTIFIED BY '{{ db_users.openboxes.password }}';
            FLUSH PRIVILEGES;

    - name: Restarting MariaDB service
      ansible.builtin.systemd:
        daemon_reload: true
        enabled: true
        name: mysql
        state: restarted

    - name: Enabling Tomcat and Nginx on web-serving hosts
      when: webserver is defined
      block:
        - name: Restarting Tomcat service on web-serving hosts
          ansible.builtin.systemd:
            daemon_reload: true
            enabled: true
            name: tomcat
            state: restarted
        - name: Restarting Nginx service on web-serving hosts
          ansible.builtin.systemd:
            daemon_reload: true
            enabled: true
            name: nginx
            state: restarted

    - name: Disabling Tomcat and Nginx on db-exclusive hosts
      when: webserver is not defined
      block:
        - name: Disabling Tomcat service on db-exclusive hosts
          ansible.builtin.systemd:
            daemon_reload: false
            enabled: false
            name: tomcat
            state: stopped
        - name: Disabling Nginx service on db-exclusive hosts
          ansible.builtin.systemd:
            daemon_reload: false
            enabled: false
            name: nginx
            state: stopped
