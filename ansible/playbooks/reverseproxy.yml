# Requires `ansible-galaxy collection install community.general`

- name: Configuring Nginx and/or database to use certbot certificates
  hosts: all
  tasks:

    - name: Adding Nginx apt key
      ansible.builtin.apt_key:
        url: https://nginx.org/keys/nginx_signing.key

    - name: Adding Nginx apt repository
      ansible.builtin.apt_repository:
        repo: deb https://nginx.org/packages/mainline/ubuntu jammy nginx

    - name: Removing apache2
      register: apt_uninstall
      ansible.builtin.apt:
        autoremove: true
        purge: true
        state: absent
        pkg:
          - apache2

    - name: Collecting apt uninstall output
      when: apt_uninstall.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ apt_uninstall.stdout_lines }}"
          - "{{ apt_uninstall.stderr_lines }}"

    - name: Installing dependencies with apt
      register: apt_install
      ansible.builtin.apt:
        cache_valid_time: 3600
        install_recommends: true
        state: latest
        update_cache: true
        pkg:
          - nginx
          - snapd

    - name: Collecting apt install output
      when: apt_install.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ apt_install.stdout_lines }}"
          - "{{ apt_install.stderr_lines }}"

    - name: Installing dependencies with snap
      changed_when: >-
        'is already installed' not in snap_install.stderr and
        'has no updates' not in snap_install.stderr
      register: snap_install
      ansible.builtin.shell:
        cmd: |
          snap install --classic --color=never --unicode=never certbot
          snap refresh --classic --color=never --unicode=never certbot

    - name: Collecting snap output
      when: snap_install.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ snap_install.stdout_lines }}"
          - "{{ snap_install.stderr_lines }}"

    - name: Installing certificates
      when: inventory.get('mysql', {}).get('enabled') or inventory.get('tomcat', {}).get('enabled')
      block:

        - name: Stopping Nginx service
          ansible.builtin.systemd:
            daemon_reload: false
            enabled: false
            name: nginx
            state: stopped

        - name: Configuring Nginx as a secure reverse proxy for Tomcat
          ansible.builtin.template:
            dest: /etc/nginx/conf.d/default.conf
            group: nginx
            mode: '0444'
            owner: nginx
            src: ../templates/default.conf.j2
            validate: 'nginx -t -c %s -c /etc/nginx/nginx.conf'

        - name: Temporarily opening port 80 on non-web-serving hosts
          when: not inventory.get('tomcat', {}).get('enabled')
          community.general.ufw:
            comment: 'allow certbot to access http (temporary rule)'
            rule: allow
            port: 80
            proto: tcp

        - name: Sprinkling Certbot pixie dust over Nginx config
          changed_when: true
          register: certbot
          ansible.builtin.command:
            cmd: >
              /snap/bin/certbot -m {{ inventory.mail.sender }} -nv --agree-tos
              --domains {{ domains }} --expand --must-staple --nginx --redirect --staple-ocsp
          vars:
            domains: "{{ ([ansible_fqdn] + inventory.get('additional_domains', [])) | join(',') }}"

        - name: Collecting Certbot output
          when: certbot.stdout_lines is defined
          ansible.builtin.debug:
            msg:
              - "{{ certbot.stdout_lines }}"
              - "{{ certbot.stderr_lines }}"

        # https://eff-certbot.readthedocs.io/en/stable/using.html#where-are-my-certificates
        - name: Enabling services to read Certbot certificates after they drop privileges
          ansible.builtin.file:
            path: "{{ item }}"
            mode: '0755'
          loop:
            - /etc/letsencrypt/archive
            - /etc/letsencrypt/live

        - name: Exposing certificates to database server
          when: inventory.get('mysql', {}).get('enabled')
          block:

            - name: Enabling database to read private Certbot keys
              ansible.builtin.file:
                group: mysql
                mode: '0640'
                path: "/etc/letsencrypt/live/{{ ansible_fqdn }}/privkey.pem"

            - name: Reminding database to reload Certbot keys weekly
              ansible.builtin.cron:
                job: mysqladmin flush-ssl
                name: mysqladmin flush-ssl
                special_time: weekly
                user: mysql

        # this step must go *after* certbot runs (certbot will overwrite it otherwise)
        - name: Enabling HTTP/2 in Nginx
          ansible.builtin.replace:
            path: /etc/nginx/conf.d/default.conf
            regexp: 'listen 443 ssl;(.*)$'
            replace: 'listen 443 ssl http2;\1  # ANSIBLE MODIFIED'
            validate: 'nginx -t -c %s -c /etc/nginx/nginx.conf'

        - name: Killing any remaining certbot-launched nginx workers
          ansible.builtin.command: killall nginx --wait
          changed_when: not killall.stdout
          failed_when: false  # cmd failure means no workers are running, which is what we want
          register: killall

        - name: Closing port 80 on non-web-serving hosts
          when: not inventory.get('tomcat', {}).get('enabled')
          community.general.ufw:
            comment: 'deny http access on non-web-serving hosts'
            rule: deny
            port: 80
            proto: tcp

        - name: Restarting Nginx service on web-serving hosts
          when: inventory.get('tomcat', {}).get('enabled')
          ansible.builtin.systemd:
            daemon_reload: false
            enabled: false
            name: nginx
            state: restarted
