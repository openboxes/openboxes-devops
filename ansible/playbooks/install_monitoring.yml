# Requires `ansible-galaxy install newrelic.newrelic-infra`

- name: Installing New Relic monitoring and enabling Sentry
  hosts: all
  vars:
    #
    # Note that the agent we use for Tomcat 7/Java 7 is missing a number of
    # features, most notably APM logs in context. See discussion here:
    # https://docs.newrelic.com/docs/logs/logs-context/java-configure-logs-context-all/
    #
    newrelic_version: "{{ '6.5.4' if (inventory.get('tomcat', {}).get('jdk') == 'zulu7') else 'current' }}"

  tasks:

    - name: Removing mysql integration from non-database hosts
      register: apt_uninstall
      when: not inventory.get('mysql', {}).get('enabled')
      ansible.builtin.apt:
        pkg: nri-mysql
        purge: true
        state: absent

    - name: Removing nginx integration from non-webserver hosts
      register: apt_uninstall
      when: not inventory.get('tomcat', {}).get('enabled')
      ansible.builtin.apt:
        pkg: nri-nginx
        purge: true
        state: absent

    - name: Collecting apt uninstall output
      when: apt_uninstall.stdout_lines is defined
      ansible.builtin.debug:
        msg:
          - "{{ apt_uninstall.stdout_lines }}"
          - "{{ apt_uninstall.stderr_lines }}"

    - name: Installing td-agent-bit for log integration
      block:
        - name: Adding fluent-bit apt key
          ansible.builtin.apt_key:
            url: https://packages.fluentbit.io/fluentbit.key
        - name: Adding fluent-bit apt repository
          ansible.builtin.apt_repository:
            repo: deb https://packages.fluentbit.io/ubuntu/jammy jammy main
        - name: Installing td-agent-bit with apt
          register: apt_bit_install
          ansible.builtin.apt:
            cache_valid_time: 3600
            install_recommends: true
            state: latest
            update_cache: true
            pkg: td-agent-bit
        - name: Collecting apt install output
          when: apt_bit_install.stdout_lines is defined
          ansible.builtin.debug:
            msg:
              - "{{ apt_bit_install.stdout_lines }}"
              - "{{ apt_bit_install.stderr_lines }}"
        - name: Reducing update frequency
          ansible.builtin.replace:
            path: /etc/td-agent-bit/td-agent-bit.conf
            regexp: '(\s*)interval_sec.*'
            replace: '\1interval_sec 60  # ANSIBLE MANAGED'
        - name: Restarting td-agent-bit service
          ansible.builtin.systemd:
            daemon_reload: true
            enabled: true
            name: td-agent-bit
            state: restarted

    - name: Installing New Relic infrastructure agent
      ansible.builtin.include_role:
        name: newrelic.newrelic-infra
      vars:
        nrinfragent_config:
          license_key: "{{ vault.new_relic.api_key }}"
        nrinfragent_integrations:
          - name: nri-mysql
            state: latest
          - name: nri-nginx
            state: latest
        targets:
          - infrastructure
          - logs

    # https://docs.newrelic.com/install/mysql/?dropdown1=linux
    - name: Installing New Relic MariaDB integration
      when: inventory.get('mysql', {}).get('enabled')
      block:
        - name: Creating database user for New Relic
          changed_when: true
          no_log: true
          ansible.builtin.command:
            argv:
              - mysql
              - -u
              - root
              - -p{{ vault.db_users.root.password }}
              - -e
              - >-
                CREATE USER IF NOT EXISTS 'newrelic'@'localhost' IDENTIFIED BY '{{ vault.db_users.newrelic.password }}' WITH MAX_USER_CONNECTIONS 5;
                GRANT REPLICATION CLIENT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;
                GRANT SELECT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;
                FLUSH PRIVILEGES;
        - name: Installing nri-mysql with apt
          register: apt_nri_mysql_install
          ansible.builtin.apt:
            cache_valid_time: 3600
            install_recommends: true
            state: latest
            update_cache: true
            pkg: nri-mysql
        - name: Collecting apt install output
          when: apt_nri_mysql_install.stdout_lines is defined
          ansible.builtin.debug:
            msg:
              - "{{ apt_nri_mysql_install.stdout_lines }}"
              - "{{ apt_nri_mysql_install.stderr_lines }}"
        - name: Applying default New Relic MariaDB configuration
          ansible.builtin.copy:
            dest: /etc/newrelic-infra/integrations.d/mysql-config.yml
            group: root
            mode: preserve
            owner: root
            remote_src: true
            src: /etc/newrelic-infra/integrations.d/mysql-config.yml.sample
        - name: Fine-tuning New Relic MariaDB configuration
          ansible.builtin.replace:
            path: /etc/newrelic-infra/integrations.d/mysql-config.yml
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - regexp: '(\s*)#?\s*DATABASE:.*'
              replace: "\\1DATABASE: {{ inventory.db_name }}  # ANSIBLE MANAGED"
            - regexp: '(\s*)#?\s*EXTENDED_METRICS:.*'
              replace: '\1EXTENDED_METRICS: true  # ANSIBLE MANAGED'
            - regexp: '(\s*)#?\s*EXTENDED_INNODB_METRICS:.*'
              replace: '\1EXTENDED_INNODB_METRICS: true  # ANSIBLE MANAGED'
            - regexp: '(\s*)#?\s*EXTENDED_MY_ISAM_METRICS:.*'
              replace: '\1EXTENDED_MY_ISAM_METRICS: true  # ANSIBLE MANAGED'
            - regexp: '(\s*)#?\s*HOSTNAME:.*'
              replace: "\\1HOSTNAME: {{ ansible_fqdn }}  # ANSIBLE MANAGED"
            - regexp: '(\s*)#?\s*PASSWORD:.*'
              replace: "\\1# ANSIBLE MANAGED\\1PASSWORD: {{ vault.db_users.newrelic.password }}"
            - regexp: '(\s*)#?\s*SOCKET:.*'
              replace: '\1SOCKET: /run/mysqld/mysqld.sock  # ANSIBLE MANAGED'
            - regexp: '(\s*)labels:'
              replace: "\\1labels:\\1  hostname: {{ ansible_fqdn }}  # ANSIBLE MANAGED"
        - name: Applying default MariaDB log forwarding config
          ansible.builtin.copy:
            dest: /etc/newrelic-infra/logging.d/mysql-log.yml
            group: root
            mode: preserve
            owner: root
            remote_src: true
            src: /etc/newrelic-infra/logging.d/mysql-log.yml.example

    # https://docs.newrelic.com/docs/infrastructure/host-integrations/host-integrations-list/nginx/nginx-integration/
    - name: Installing New Relic nginx integration
      when: inventory.get('tomcat', {}).get('enabled')
      block:
        - name: Installing nri-nginx with apt
          register: apt_nri_nginx_install
          ansible.builtin.apt:
            cache_valid_time: 3600
            install_recommends: true
            state: latest
            update_cache: true
            pkg: nri-nginx
        - name: Collecting apt install output
          when: apt_nri_nginx_install.stdout_lines is defined
          ansible.builtin.debug:
            msg:
              - "{{ apt_nri_nginx_install.stdout_lines }}"
              - "{{ apt_nri_nginx_install.stderr_lines }}"
        - name: Applying default New Relic nginx configuration
          ansible.builtin.copy:
            dest: /etc/newrelic-infra/integrations.d/nginx-config.yml
            group: root
            mode: preserve
            owner: root
            remote_src: true
            src: /etc/newrelic-infra/integrations.d/nginx-config.yml.sample
        - name: Fine-tuning New Relic nginx configuration
          ansible.builtin.replace:
            path: /etc/newrelic-infra/integrations.d/nginx-config.yml
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - regexp: '(\s*)STATUS_URL.*'
              replace: "\\1STATUS_URL: https://{{ ansible_fqdn }}/status  # ANSIBLE MANAGED"
            - regexp: '(\s*)STATUS_MODULE.*'
              replace: "\\1STATUS_MODULE: ngx_http_stub_status_module  # ANSIBLE MANAGED"
            - regexp: '(\s*)labels:'
              replace: "\\1labels:\\1  hostname: {{ ansible_fqdn }}  # ANSIBLE MANAGED"
        - name: Applying default nginx log forwarding config
          ansible.builtin.copy:
            dest: /etc/newrelic-infra/logging.d/nginx-log.yml
            group: root
            mode: preserve
            owner: root
            remote_src: true
            src: /etc/newrelic-infra/logging.d/nginx-log.yml.example

    - name: Installing New Relic Tomcat integration
      when: inventory.get('tomcat', {}).get('enabled')
      block:
        - name: Creating temporary download directory
          register: tmp_download_dir
          ansible.builtin.tempfile:
            state: directory
            suffix: .download

        - name: Downloading New Relic Tomcat agent
          ansible.builtin.get_url:
            dest: "{{ item.dest }}"
            mode: '0400'
            url: "{{ item.url }}"
          loop:
            - dest: "{{ tmp_download_dir.path }}/newrelic-java-agent.zip"
              url: "https://download.newrelic.com/newrelic/java-agent/newrelic-agent/{{ newrelic_version }}/newrelic-java.zip"
        - name: Unpacking New Relic Tomcat agent
          ansible.builtin.unarchive:
            dest: "/var/lib/{{ item }}"
            group: tomcat
            owner: tomcat
            remote_src: true
            src: "{{ tmp_download_dir.path }}/newrelic-java-agent.zip"
          loop:
            - tomcat7
            - tomcat85
        - name: Editing New Relic Tomcat agent yml files
          no_log: true
          ansible.builtin.replace:
            path: "{{ item.path }}"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - path: /var/lib/tomcat7/newrelic/newrelic.yml
              regexp: '^  app_name:.*$'
              replace: "  # ANSIBLE MANAGED\n  app_name: 'tomcat7:{{ ansible_fqdn }}'"
            - path: /var/lib/tomcat85/newrelic/newrelic.yml
              regexp: '^  app_name:.*$'
              replace: "  # ANSIBLE MANAGED\n  app_name: 'tomcat85:{{ ansible_fqdn }}'"
            - path: /var/lib/tomcat7/newrelic/newrelic.yml
              regexp: '(\s*)labels:'
              replace: "\\1labels:\\1  hostname: {{ ansible_fqdn }}  # ANSIBLE MANAGED"
            - path: /var/lib/tomcat85/newrelic/newrelic.yml
              regexp: '(\s*)labels:'
              replace: "\\1labels:\\1  hostname: {{ ansible_fqdn }}  # ANSIBLE MANAGED"
            - path: /var/lib/tomcat7/newrelic/newrelic.yml
              regexp: '^  license_key:.*$'
              replace: "  # ANSIBLE MANAGED\n  license_key: {{ vault.new_relic.api_key }}"
            - path: /var/lib/tomcat85/newrelic/newrelic.yml
              regexp: '^  license_key:.*$'
              replace: "  # ANSIBLE MANAGED\n  license_key: {{ vault.new_relic.api_key }}"
            - path: /var/lib/tomcat7/newrelic/newrelic.yml
              regexp: '^  log_file_name: newrelic_agent.log'
              replace: '  # ANSIBLE MANAGED\n  log_file_name: STDOUT'
            - path: /var/lib/tomcat85/newrelic/newrelic.yml
              regexp: '^  log_file_name: newrelic_agent.log'
              replace: '  # ANSIBLE MANAGED\n  log_file_name: STDOUT'
#             - path: /var/lib/tomcat7/newrelic/newrelic.yml
#               regexp: '^  enable_auto_app_naming: .*$'
#               replace: "  # ANSIBLE MANAGED\n  enable_auto_app_naming: false"
#             - path: /var/lib/tomcat85/newrelic/newrelic.yml
#               regexp: '^  enable_auto_app_naming: .*$'
#               replace: "  # ANSIBLE MANAGED\n  enable_auto_app_naming: false"
        - name: Adding New Relic flags to Tomcat's setenv.sh
          ansible.builtin.lineinfile:
            insertafter: EOF
            line: "{{ item.line }}"
            path: "{{ item.path }}"
          loop:
            - line: "export CATALINA_OPTS=\"$CATALINA_OPTS -javaagent:/var/lib/tomcat7/newrelic/newrelic.jar\"  # ANSIBLE MANAGED"
              path: /var/lib/tomcat7/bin/setenv.sh
            - line: "export CATALINA_OPTS=\"$CATALINA_OPTS -javaagent:/var/lib/tomcat85/newrelic/newrelic.jar\"  # ANSIBLE MANAGED"
              path: /var/lib/tomcat85/bin/setenv.sh
            - line: 'export CATALINA_OPTS="$CATALINA_OPTS -Dnewrelic.config.application_logging.forwarding.context_data.enabled=true"  # ANSIBLE MANAGED'
              path: /var/lib/tomcat7/bin/setenv.sh
            - line: 'export CATALINA_OPTS="$CATALINA_OPTS -Dnewrelic.config.application_logging.forwarding.context_data.enabled=true"  # ANSIBLE MANAGED'
              path: /var/lib/tomcat85/bin/setenv.sh

        - name: Adding Java 7-specific New Relic flags
          when: inventory.get('tomcat', {}).get('jdk') == 'zulu7'
          ansible.builtin.lineinfile:
            insertafter: EOF
            # https://docs.newrelic.com/docs/distributed-tracing/concepts/how-new-relic-distributed-tracing-works/
            line: 'export CATALINA_OPTS="$CATALINA_OPTS -Dnewrelic.config.distributed_tracing.enabled=true"  # ANSIBLE MANAGED'
            path: "/var/lib/{{ item }}/bin/setenv.sh"
          loop:
            - tomcat7
            - tomcat85

        - name: Adding Java 8+-specific New Relic flags
          when: inventory.get('tomcat', {}).get('jdk') == 'zulu8'
          ansible.builtin.lineinfile:
            insertafter: EOF
            # https://docs.newrelic.com/docs/apm/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/
            line: 'export CATALINA_OPTS="$CATALINA_OPTS -XX:StartFlightRecording -Dnewrelic.config.jfr.enabled=true"  # ANSIBLE MANAGED'
            path: "/var/lib/{{ item }}/bin/setenv.sh"
          loop:
            - tomcat7
            - tomcat85

    - name: Configuring New Relic infrastructure agent
      ansible.builtin.blockinfile:
        insertafter: EOF
        marker: '# {mark} ANSIBLE MANAGED BLOCK'
        path: /etc/newrelic-infra.yml
        block: |
          display_name: {{ ansible_fqdn }}
          enable_process_metrics: true

    - name: Correcting improperly-set PIDFile field in newrelic-infra.service
      ansible.builtin.replace:
        path: /etc/systemd/system/newrelic-infra.service
        regexp: 'PIDFile=/var/run/newrelic-infra/newrelic-infra.pid'
        replace: 'PIDFile=/run/newrelic-infra/newrelic-infra.pid  # ANSIBLE MANAGED'

    - name: Configuring Sentry
      when: ansible_hostname in vault.get('sentry_dsn', {})
      block:
        - name: Adding Sentry flags to Tomcat's setenv.sh
          ansible.builtin.lineinfile:
            insertafter: EOF
            line: "{{ item.line }}"
            path: "{{ item.path }}"
          loop:
            - line: "export SENTRY_DSN={{ vault.sentry_dsn[ansible_hostname] }}  # ANSIBLE MANAGED"
              path: /var/lib/tomcat7/bin/setenv.sh
            - line: "export SENTRY_DSN={{ vault.sentry_dsn[ansible_hostname] }}  # ANSIBLE MANAGED"
              path: /var/lib/tomcat85/bin/setenv.sh
        - name: Activating Grails' Sentry plugin
          ansible.builtin.lineinfile:
            insertafter: EOF
            line: 'grails.plugins.raven.active = true'
            path: /home/tomcat/.grails/openboxes-config.groovy
            regexp: 'grails.plugins.raven.active = false'
        - name: Configuring Grails' Sentry plugin
          ansible.builtin.lineinfile:
            insertafter: 'grails.plugins.raven.active'
            line: "grails.plugins.raven.dsn = \"{{ vault.sentry_dsn[inventory_hostname] }}\""
            path: /home/tomcat/.grails/openboxes-config.groovy

    - name: Restarting New Relic service
      ansible.builtin.systemd:
        daemon_reload: true
        enabled: true
        name: newrelic-infra
        state: restarted

    - name: Restarting MariaDB service on db-serving hosts
      when: inventory.get('mysql', {}).get('enabled')
      ansible.builtin.systemd:
        daemon_reload: true
        enabled: true
        name: mysql
        state: restarted

    - name: Restarting Tomcat and Nginx on web-serving hosts
      when: inventory.get('tomcat', {}).get('enabled')
      block:
        - name: Restarting Tomcat service on web-serving hosts
          ansible.builtin.systemd:
            daemon_reload: true
            enabled: true
            name: tomcat
            state: restarted
        - name: Restarting Nginx service on web-serving hosts
          ansible.builtin.systemd:
            daemon_reload: true
            enabled: true
            name: nginx
            state: restarted
